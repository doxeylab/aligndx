# ================================================
# STAGE 1: Python Base
# ================================================
FROM python:3.8-slim-buster as python-base

ENV PYTHONUNBUFFERED=true

RUN apt-get update && apt-get install -y \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# ================================================
# STAGE 2: Poetry for Python Dependencies
# ================================================
FROM python-base as poetry-stage

WORKDIR /app

ENV POETRY_HOME=/opt/poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV PATH="$POETRY_HOME/bin:$PATH"

RUN python -c 'from urllib.request import urlopen; print(urlopen("https://install.python-poetry.org").read().decode())' | python -
COPY pyproject.toml poetry.lock ./
RUN poetry install --no-interaction --no-ansi -vvv

# ================================================
# STAGE 3: Build jupyer assets
# ================================================
FROM python-base as build-static

WORKDIR /app

COPY --from=poetry-stage /app/.venv /.venv
COPY . .
ENV PATH="/.venv/bin:$PATH"
RUN jupyter lite build --output-dir ./dist

# ===============================
# STAGE 4: NGINX for serving static files
# ===============================
FROM nginx:alpine as runtime

RUN apk add --no-cache openssl

COPY confs/default.conf /etc/nginx/conf.d/
COPY confs/gzip.conf confs/options-ssl-nginx.conf confs/hsts.conf /etc/nginx/includes/
COPY site.conf.tpl /customization/
COPY nginx.sh /customization/
COPY --from=build-static /app/dist /usr/share/nginx/html

RUN chmod +x /customization/nginx.sh

EXPOSE 80

CMD ["/customization/nginx.sh"]