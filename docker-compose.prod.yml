version: "3.7"
name: aligndx

services:

  nginx:
    build: 
      context: ./proxy/nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - nginx_conf:/etc/nginx/sites
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
      - ./proxy/vhosts:/etc/nginx/vhosts
    environment:
      DOMAINS: ${DOMAINS}
      CERTBOT_EMAILS: ${CERTBOT_EMAILS}
      CERTBOT_TEST_CERT: ${CERTBOT_TEST_CERT}
      CERTBOT_RSA_KEY_SIZE: ${CERTBOT_RSA_KEY_SIZE}

  certbot:
    build: 
      context: ./proxy/certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
    environment:
      DOMAINS: ${DOMAINS}
      CERTBOT_EMAILS: ${CERTBOT_EMAILS}
      CERTBOT_TEST_CERT: ${CERTBOT_TEST_CERT}
      CERTBOT_RSA_KEY_SIZE: ${CERTBOT_RSA_KEY_SIZE}

  cron:
    build: 
      context: ./proxy/cron
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workdir:ro
    environment:
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}

  # API Server
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8080
    tty: true
    depends_on:
      - postgres
    expose:
      - 8080
    volumes:
      - ./backend/app:${PROJECT_PATH}/app
      - ./backend/data:${PROJECT_PATH}/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DATABASE_URL: ${DATABASE_URL}
      BASE_URL: ${BASE_URL}
      ORIGINS: ${ORIGINS}
      API_URL: ${INTERNAL_API_URL}
      SECRET_KEY: ${SECRET_KEY}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
      NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_URL: ${REDIS_URL}
      PROJECT_PATH: ${PROJECT_PATH}

  # Task Managment Executor
  celery_worker:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
    depends_on:
      - backend
      - redis
    command: sh -c "celery -A app.celery.tasks worker -l info"
    tty: true
    volumes:
      - ./backend/app:${PROJECT_PATH}/app
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/data:${PROJECT_PATH}/data
    environment:
      API_URL: ${INTERNAL_API_URL}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
      NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      PROJECT_PATH: ${PROJECT_PATH}

  # client
  frontend:
    build:
      context: frontend
      target: production
      args:
        NEXT_PUBLIC_BASE_URL: ${BASE_URL}
        NEXT_PUBLIC_BACKEND_ACCESS_URL: ${API_URL}
        NEXT_PUBLIC_TUS_ENDPOINT: ${TUS_ENDPOINT}
        NEXT_PUBLIC_COMPANION_URL: ${COMPANION_DOMAIN}
    tty: true
    expose:
      - 3000
    volumes:
      - ./frontend/:/opt/app
      - /opt/app/node_modules

  tusd:
    image: tusproject/tusd
    command: -upload-dir=/data/uploads --hooks-http http://backend:8080/uploads/tusd -hooks-http-forward-headers Authorization
    tty: true
    expose:
      - 1080
    volumes:
      - ./backend/data:/data

  companion:
    build:
      context: companion
    tty: true
    command: sh -c "npx companion"
    expose:
      - 3020
    environment:
      COMPANION_CLIENT_ORIGINS: ${ORIGINS}
      COMPANION_HIDE_WELCOME: true 
      COMPANION_HIDE_METRICS: true 
      COMPANION_STREAMING_UPLOAD: true
      COMPANION_DOMAIN: ${COMPANION_DOMAIN}
      COMPANION_SECRET: ${COMPANION_SECRET}
      COMPANION_DATADIR: ${COMPANION_DATADIR}
      COMPANION_GOOGLE_KEY: ${COMPANION_GOOGLE_KEY}
      COMPANION_GOOGLE_SECRET: ${COMPANION_GOOGLE_SECRET}
      COMPANION_UPLOAD_URLS: ${TUS_ENDPOINT}

  # Databases

  # Primary Database
  postgres:
    image: postgres:12
    restart: unless-stopped
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}

  # In-Memory Story for transient data
  redis:
    image: redis:7
    command: sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    restart: unless-stopped
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/sdata
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}

volumes:
  db-data:
  pgadmin-data:
  redis-data:
  nginx_conf:
  letsencrypt_certs:
  certbot_acme_challenge:
