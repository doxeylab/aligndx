version: "3.7"
name: aligndx

services:
  nginx:
    build:
      context: proxy/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    tty: true
    # restart: unless-stopped

  # API Server
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8080 --root-path /api
    tty: true
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      BASE_URL: ${BASE_URL}
      ORIGINS: ${ORIGINS}
      API_URL: ${INTERNAL_API_URL}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      REDIS_URL: ${REDIS_URL}
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID}
      STORAGE_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY}
      STORAGE_REGION_NAME: ${STORAGE_REGION_NAME}
      STORAGE_ENDPOINT_URL: ${STORAGE_ENDPOINT_URL}

  # Task Managment Executor
  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    depends_on:
      - backend
      - redis
    command: sh -c "celery -A app.celery worker -l info -E -c 1"
    tty: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend:/app
    environment:
      API_URL: ${INTERNAL_API_URL}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      REDIS_URL: ${REDIS_URL}
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID}
      STORAGE_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY}
      STORAGE_REGION_NAME: ${STORAGE_REGION_NAME}
      STORAGE_ENDPOINT_URL: ${STORAGE_ENDPOINT_URL}

  # Client
  frontend:
    build:
      context: frontend
      target: base
    tty: true
    command: sh -c "npm run dev"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/:/opt/app
      - /opt/app/node_modules
    environment:
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL}
      NEXT_PUBLIC_BACKEND_ACCESS_URL: ${NEXT_PUBLIC_BACKEND_ACCESS_URL}
      NEXT_PUBLIC_TUS_ENDPOINT: ${NEXT_PUBLIC_TUS_ENDPOINT}

  tusd:
    image: tusproject/tusd
    command: tusd -s3-bucket uploads -s3-endpoint http://minio:9000 -hooks-http http://backend:8080/webhooks/tus/ -hooks-enabled-events post-finish -hooks-http-forward-headers Authorization
    tty: true
    ports:
      - "1080:1080"
    volumes:
      - ./backend/data:/data
    environment:
      AWS_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY}
      AWS_REGION: ${STORAGE_REGION_NAME}

  minio:
    image: minio/minio
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_ACCESS_KEY}
    command: server --console-address ":9001" /data

  # Databases

  # Primary Database
  postgres:
    image: postgres:12
    restart: unless-stopped
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}

  # In-Memory Story for transient data
  redis:
    image: redis:7
    command: sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    restart: unless-stopped
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/sdata
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}

  # Monitoring Services

  # Postgres admin
  pgadmin:
    tty: true
    image: dpage/pgadmin4
    profiles: ["monitoring"]
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8001:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}

  # Celery Monitoring tool
  flower:
    build:
      context: backend
      dockerfile: Dockerfile
    profiles: ["monitoring"]
    depends_on:
      - backend
      - redis
      - worker
    command: sh -c "celery flower --port=5555 --broker=$${CELERY_BROKER_URL}"
    tty: true
    volumes:
      - ./backend/app:/app/app
    ports:
      - 5556:5555
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

volumes:
  db-data:
  pgadmin-data:
  redis-data:
  minio-data:
