version: "3.7"
name: aligndx

services:

  # API Server
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
    command: ./start-reload.sh
    tty: true
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ./backend/app:${PROJECT_PATH}/app
      - ./backend/data:${PROJECT_PATH}/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      PORT: 8080
      LOG_LEVEL: "debug"
      BASE_URL: ${BASE_URL}
      ORIGINS: ${ORIGINS}
      API_URL: ${INTERNAL_API_URL}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      REDIS_URL: ${REDIS_URL}
      PROJECT_PATH: ${PROJECT_PATH}
      PIPELINES_REPO: ${PIPELINES_REPO}
      PIPELINES_REPO_TOKEN: ${PIPELINES_REPO_TOKEN}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

  # Task Managment Executor
  celery_worker:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        PROJECT_PATH: ${PROJECT_PATH}
    depends_on:
      - backend
      - redis
    command: sh -c "celery -A app.celery worker -l debug -E -c 1"
    tty: true
    volumes:
      - ./backend/app:${PROJECT_PATH}/app 
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/data:${PROJECT_PATH}/data
    environment:
      API_URL: ${INTERNAL_API_URL}
      CELERY_API_KEY: ${CELERY_API_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      PIPELINES_REPO: ${PIPELINES_REPO}
      PIPELINES_REPO_TOKEN: ${PIPELINES_REPO_TOKEN}
      REDIS_URL: ${REDIS_URL}
      PROJECT_PATH: ${PROJECT_PATH}

  # Client
  frontend:
    build:
      context: frontend
      target: base
    tty: true
    command: sh -c "npm run dev"
    ports:
      - "80:3000"
    volumes:
      - ./frontend/:/opt/app
      - /opt/app/node_modules
    env_file:
      - .env
  
  tusd:
    image: tusproject/tusd
    command: -upload-dir=/data/uploads -port=1080 --hooks-http http://backend:8080/webhooks/tus/ -hooks-http-forward-headers Authorization
    tty: true
    ports:
      - "1080:1080"
    volumes:
      - ./backend/data:/data

  companion:
    build:
      context: companion
    tty: true
    command: sh -c "npx companion"
    ports:
      - "3020:3020"
    environment:
      COMPANION_ALLOW_LOCAL_URLS: true
      COMPANION_DATADIR: "./data"
      COMPANION_STREAMING_UPLOAD: true
      COMPANION_PROTOCOL: ${COMPANION_PROTOCOL}
      COMPANION_DOMAIN: ${COMPANION_DOMAIN}
      COMPANION_SECRET: ${COMPANION_SECRET}
      COMPANION_UPLOAD_URLS: ${COMPANION_UPLOAD_URLS}

  # Databases

  # Primary Database
  postgres:
    image: postgres:12
    restart: unless-stopped
    expose:
      - 5432
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data

  # In-Memory Story for transient data
  redis:
    image: redis:7
    command: sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    restart: unless-stopped
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/sdata
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}

  # Monitoring Services
  # redisinsight:
  #   image: redislabs/redisinsight:latest
  #   ports:
  #     - "8001:8001"
  #   depends_on:
  #     - redis
  #   environment:
  #     REDIS_HOST: redis # the service name of Redis container
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
      
  # Postgres admin
  pgadmin:
    tty: true
    image: dpage/pgadmin4
    profiles: [ "monitoring" ]
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8001:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}

  # Celery Monitoring tool
  flower:
    build:
      context: backend
      dockerfile: Dockerfile
    profiles: [ "monitoring" ]
    depends_on:
      - backend
      - redis
      - celery_worker
    command: sh -c "celery flower --port=5555 --broker=$${CELERY_BROKER_URL}"
    tty: true
    volumes:
      - ./backend/app:/app/app
    ports:
      - 5556:5555
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

volumes:
  db-data:
  pgadmin-data:
  redis-data: 