[{"/home/noctildo/POCD/pocd-seq-app/src/index.js":"1","/home/noctildo/POCD/pocd-seq-app/src/App.js":"2","/home/noctildo/POCD/pocd-seq-app/src/pages/Team.js":"3","/home/noctildo/POCD/pocd-seq-app/src/pages/FAQ.js":"4","/home/noctildo/POCD/pocd-seq-app/src/components/Navbar.js":"5","/home/noctildo/POCD/pocd-seq-app/src/pages/Contact.js":"6","/home/noctildo/POCD/pocd-seq-app/src/pages/About.js":"7","/home/noctildo/POCD/pocd-seq-app/src/pages/Home.js":"8","/home/noctildo/POCD/pocd-seq-app/src/pages/Result.js":"9","/home/noctildo/POCD/pocd-seq-app/src/components/FileUpload.js":"10","/home/noctildo/POCD/pocd-seq-app/src/components/Modal.js":"11","/home/noctildo/POCD/pocd-seq-app/src/components/FileUploader.js":"12","/home/noctildo/POCD/pocd-seq-app/src/components/Backdrop.js":"13","/home/noctildo/POCD/pocd-seq-app/src/components/LoadingSpinner.js":"14","/home/noctildo/POCD/pocd-seq-app/src/services/FileUploadService.js":"15","/home/noctildo/POCD/pocd-seq-app/src/http-common.js":"16","/home/noctildo/POCD/pocd-seq-app/src/pages/Download.js":"17"},{"size":486,"mtime":1613161641110,"results":"18","hashOfConfig":"19"},{"size":866,"mtime":1614946484400,"results":"20","hashOfConfig":"19"},{"size":130,"mtime":1614708426938,"results":"21","hashOfConfig":"19"},{"size":127,"mtime":1614708426926,"results":"22","hashOfConfig":"19"},{"size":1859,"mtime":1614946484405,"results":"23","hashOfConfig":"19"},{"size":139,"mtime":1614708426909,"results":"24","hashOfConfig":"19"},{"size":133,"mtime":1614708426901,"results":"25","hashOfConfig":"19"},{"size":2415,"mtime":1614946343624,"results":"26","hashOfConfig":"19"},{"size":2594,"mtime":1614946484409,"results":"27","hashOfConfig":"19"},{"size":537,"mtime":1614946343618,"results":"28","hashOfConfig":"19"},{"size":524,"mtime":1613161641062,"results":"29","hashOfConfig":"19"},{"size":7160,"mtime":1614946484403,"results":"30","hashOfConfig":"19"},{"size":166,"mtime":1613161640789,"results":"31","hashOfConfig":"19"},{"size":461,"mtime":1614946343621,"results":"32","hashOfConfig":"19"},{"size":472,"mtime":1614708426947,"results":"33","hashOfConfig":"19"},{"size":153,"mtime":1613161641075,"results":"34","hashOfConfig":"19"},{"size":213,"mtime":1614946484407,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"109nbsu",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/noctildo/POCD/pocd-seq-app/src/index.js",[],["72","73"],"/home/noctildo/POCD/pocd-seq-app/src/App.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/Team.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/FAQ.js",[],"/home/noctildo/POCD/pocd-seq-app/src/components/Navbar.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/Contact.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/About.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/Home.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/Result.js",[],"/home/noctildo/POCD/pocd-seq-app/src/components/FileUpload.js",[],"/home/noctildo/POCD/pocd-seq-app/src/components/Modal.js",[],"/home/noctildo/POCD/pocd-seq-app/src/components/FileUploader.js",["74"],"  \nimport React, { useState, useEffect, useRef } from \"react\";\n// eslint-disable-next-line\nimport UploadService from \"../services/FileUploadService\";\nimport axios from 'axios';\n// eslint-disable-next-line\n\nconst FileUploader = ({parentCallback, spinnerCallback}) => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  // eslint-disable-next-line\n  const [errorMessage, setErrorMessage] = useState('');\n  const [validFiles, setValidFiles] = useState([]);\n  const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n  const [dropzoneActive, setDropzoneActive] = useState(false);\n  const [modalClose, setModalClose] = useState(false)\n\n  const fileInputRef = useRef();\n  // eslint-disable-next-line\n  // const uploadModalRef = useRef();\n  // // eslint-disable-next-line\n  // const uploadRef = useRef();\n  // // eslint-disable-next-line\n  // const progressRef = useRef();\n\n  useEffect(() => {\n    let filteredArray = selectedFiles.reduce((file, current) => {\n        const x = file.find(item => item.name === current.name);\n        if (!x) {\n            return file.concat([current]);\n        } else {\n            return file;\n        }\n    }, []);\n    setValidFiles([...filteredArray]);\n\n  }, [selectedFiles]);\n\n  const dragOver = (e) => {\n    e.preventDefault();\n  }\n\n  const dragEnter = (e) => {\n    setDropzoneActive(!dropzoneActive)\n    e.preventDefault();\n  }\n\n  const dragLeave = (e) => {\n    setDropzoneActive(!dropzoneActive)\n    e.preventDefault();\n  }\n\n  const fileDrop = (e) => {\n    setDropzoneActive(!dropzoneActive)\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    if (files.length) {\n        handleFiles(files);\n    }\n  }\n\n  const filesSelected = () => {\n    if (fileInputRef.current.files.length) {\n        handleFiles(fileInputRef.current.files);\n    }\n  }\n\n  const fileInputClicked = () => {\n    fileInputRef.current.click();\n  }\n\n  const handleFiles = (files) => {\n    for(let i = 0; i < files.length; i++) {\n      if (validateFile(files[i])) {\n          setSelectedFiles(prevArray => [...prevArray, files[i]]);\n      } else {\n        files[i]['invalid'] = true;\n        setSelectedFiles(prevArray => [...prevArray, files[i]]);\n        setErrorMessage('File type not permitted');\n        setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n      }\n    }\n  }\n\n  const validateFile = (file) => {\n    const fileType = file.name.split('.').pop()\n    const validTypes = ['fastq'];\n    if (validTypes.indexOf(fileType) === -1) {\n        return false;\n    }\n    return true;\n  }\n\n  const fileSize = (size) => {\n    if (size === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  const fileType = (fileName) => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n  }\n\n  const removeFile = (name) => {\n    const validFileIndex = validFiles.findIndex(e => e.name === name);\n    const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n    const unsupportedFileIndex = unsupportedFiles.findIndex(e => e.name === name);\n    validFiles.splice(validFileIndex, 1);\n    selectedFiles.splice(selectedFileIndex, 1);\n    setValidFiles([...validFiles]);\n    setSelectedFiles([...selectedFiles]);\n    if (unsupportedFileIndex !== -1) {\n        unsupportedFiles.splice(unsupportedFileIndex, 1);\n        setUnsupportedFiles([...unsupportedFiles]);\n    }\n  }\n\n  const uploadFiles = () => {\n    setModalClose(true);\n    parentCallback()\n    const formData = new FormData();\n    validFiles.forEach(file => {\n      formData.append('file', file)\n    })\n    axios.post('http://localhost:8080/upload', formData, {\n        onUploadProgress: (progressEvent) => {\n          spinnerCallback(true)\n          const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n          if (uploadPercentage === 100) {\n            validFiles.length = 0;\n            setValidFiles([...validFiles]);\n            setSelectedFiles([...validFiles]);\n            setUnsupportedFiles([...validFiles]);\n          }\n        }\n      })\n      .then(() => {\n        window.location.href = \"/result\"\n      })\n      .catch(() => {\n        spinnerCallback(false)\n        console.log('ERROR')\n      });\n  }\n\n\n  /*\n  {const closeUploadModal = () => {\n    uploadModalRef.current.style.display = 'none';\n  }\n  */\n\n  return (\n    <div>\n      {selectedFiles.length ? \n        <div className=\"file-display-container\">\n          <div className=\"file-display-content\">\n            {\n              validFiles.map((data, i) => \n                <div className=\"file-status-bar\" key={i}>\n                  <div>\n                    <div className=\"file-type-logo\"></div>\n                    <div className=\"file-type\">{fileType(data.name)}</div>\n                    <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                    <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                  </div>\n                  <div className=\"file-remove\" onClick={() => removeFile(data.name)}>\n                    <i className=\"fas fa-times fa-lg\"></i>\n                  </div>\n                </div>\n              )\n            }\n          </div>\n        </div>\n        :\n        <div className={dropzoneActive ? 'drop-container--dropzoneActive' : 'drop-container'}\n          onDragOver={dragOver}\n          onDragEnter={dragEnter}\n          onDragLeave={dragLeave}\n          onDrop={fileDrop}\n          onClick={fileInputClicked}\n        >\n          {unsupportedFiles.length ? \n            <div className=\"drop-message-error\">\n              <input\n                ref={fileInputRef}\n                className=\"file-input\"\n                type=\"file\"\n                accept=\".fastq\"\n                onChange={filesSelected}\n\n              />\n              <div className=\"upload-icon\"></div>\n              Please only upload FASTQ files!\n            </div>\n          :\n            <div className=\"drop-message\">\n              <input\n                ref={fileInputRef}\n                className=\"file-input\"\n                type=\"file\"\n                accept=\".fastq\"\n                onChange={filesSelected}\n                multiple=\"multiple\"\n              />\n              <div className=\"upload-icon\"></div>\n              Drag & Drop files here or click to upload\n            </div>\n          }\n        </div>\n      }\n\n      <button disabled={selectedFiles.length ? false : true} className=\"file-upload-btn\"  onClick={() => uploadFiles()}>Analyze</button>\n\n      {/*<div className=\"upload-modal\" ref={uploadModalRef}>\n        <div className=\"close\" onClick={(() => closeUploadModal())}>X</div>\n        <div className=\"progress-container\">\n          <span ref={uploadRef}></span>\n          <div className=\"progress\">\n            <div className=\"progress-bar\" ref={progressRef}></div>\n          </div>\n        </div>\n    </div>*/}\n\n    </div>\n  );\n};\n\nexport default FileUploader;","/home/noctildo/POCD/pocd-seq-app/src/components/Backdrop.js",[],"/home/noctildo/POCD/pocd-seq-app/src/components/LoadingSpinner.js",[],"/home/noctildo/POCD/pocd-seq-app/src/services/FileUploadService.js",[],"/home/noctildo/POCD/pocd-seq-app/src/http-common.js",[],"/home/noctildo/POCD/pocd-seq-app/src/pages/Download.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":14,"column":10,"nodeType":"81","messageId":"82","endLine":14,"endColumn":20},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'modalClose' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]