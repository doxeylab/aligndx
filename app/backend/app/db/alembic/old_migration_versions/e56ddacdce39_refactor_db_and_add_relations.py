"""refactor db and add relations

Revision ID: e56ddacdce39
Revises: 33323149a317
Create Date: 2022-03-16 04:12:11.563070

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e56ddacdce39'
down_revision = '33323149a317'
branch_labels = None
depends_on = None


def upgrade():
    # drop primary key constraints
    op.execute('ALTER TABLE users DROP CONSTRAINT users_pkey CASCADE')
    op.execute('ALTER TABLE upload_logs DROP CONSTRAINT upload_logs_pkey CASCADE')
    op.execute('ALTER TABLE deletion_logs DROP CONSTRAINT deletion_logs_pkey CASCADE')
    op.execute('ALTER TABLE customers DROP CONSTRAINT customers_pkey CASCADE')
    op.execute('ALTER TABLE subscriptions DROP CONSTRAINT subscriptions_pkey CASCADE')
    op.execute('ALTER TABLE invoices DROP CONSTRAINT invoices_pkey CASCADE')

    # ### commands auto generated by Alembic - please adjust! ###
    
    op.alter_column('customers', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('customers_id_seq'::regclass)"))
    op.alter_column('deletion_logs', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False)
    op.alter_column('invoices', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False)

    op.add_column('submissions', sa.Column('name', sa.String(), nullable=False))
    op.drop_column('submissions', 'sample_name')

    op.alter_column('subscriptions', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False)
    op.alter_column('upload_logs', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('upload_logs_id_seq'::regclass)"))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=250),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.BIGINT(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    # ### end Alembic commands ###
    op.create_primary_key('users_pkey', 'users', ['id'])
    op.create_primary_key('upload_logs_pkey', 'upload_logs', ['id'])
    op.create_primary_key('deletion_logs_pkey', 'deletion_logs', ['id'])
    op.create_primary_key('customers_pkey', 'customers', ['id'])
    op.create_primary_key('subscriptions_pkey', 'subscriptions', ['id'])
    op.create_primary_key('invoices_pkey', 'invoices', ['id'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'name',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('users', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.BIGINT(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(length=250),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('upload_logs', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('upload_logs_id_seq'::regclass)"))
    op.alter_column('subscriptions', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('subscriptions', 'customer_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('submissions', sa.Column('sample_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.alter_column('submissions', 'user_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('submissions', 'name')
    op.alter_column('invoices', 'subscription_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('invoices', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('invoices', 'customer_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('deletion_logs', 'upload_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('deletion_logs', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('customers', 'id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False,
               existing_server_default=sa.text("nextval('customers_id_seq'::regclass)"))
    op.alter_column('customers', 'admin_user_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.INTEGER(),
               existing_nullable=False)
    # ### end Alembic commands ###
