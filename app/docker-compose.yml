version: "3.7"
services:
  backend:
    build:
      context: backend
      dockerfile: docker/api/Dockerfile
    command: sh -c " sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && uvicorn app.main:app --reload --host 0.0.0.0 --port 8080"
    tty: true
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      # these are all bind mounts, not volumes
      - ./backend/app:/app/app
      - ./backend/results:/app/results
      - ./backend/uploads:/app/uploads
      - ./backend/indexes:/app/indexes:ro
      - ./backend/metadata:/app/metadata:ro
    environment:
      DATABASE_URL: ${DATABASE_URL}
      BASE_URL: ${BASE_URL}
      ORIGINS: ${ORIGINS}
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
      NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    stdin_open: true
    ports:
      - "80:3000"
    volumes:
      - ./frontend:/app/
      - /app/node_modules
    environment:
      NODE_ENV: development
      BASE_URL: ${BASE_URL}
      REACT_APP_BACKEND_ACCESS_URL: ${REACT_APP_BACKEND_ACCESS_URL}

  postgres:
    image: postgres:12
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}

  pgadmin:
    tty: true
    image: dpage/pgadmin4
    profiles: [ "monitoring" ]
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8001:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}

  salmon:
    build:
      context: tool
      dockerfile: docker/salmon/Dockerfile
    command: uvicorn app.main:app --reload --workers 4 --host 0.0.0.0 --port 80
    tty: true
    ports:
      - "8002:80"
    volumes:
      - ./tool/app/:/app/app/:ro
      - ./backend/results:/app/results
      - ./backend/uploads:/app/uploads
      - ./backend/indexes:/app/indexes:ro
      - ./backend/metadata:/app/metadata:ro
  
  kraken2:
    build:
      context: tool
      dockerfile: docker/kraken2/Dockerfile
    command: uvicorn app.main:app --reload --workers 4 --host 0.0.0.0 --port 80
    tty: true
    ports:
      - "8003:80"
    volumes:
      - ./tool/app/:/app/app/:ro
      - ./backend/results:/app/results
      - ./backend/uploads:/app/uploads

  rabbitmq:
    image: rabbitmq:3.9
    ports:
      - "5672"

  celery_worker:
    build:
      context: backend
      dockerfile: docker/celery_worker/Dockerfile
    depends_on:
      - backend
      - rabbitmq
    command: sh -c "sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && celery -A app.celery.tasks worker -l info -Q uploads,salmon,downstream"
    tty: true
    volumes:
      - ./backend/app/celery:/app/celery:ro
      - ./backend/app/scripts:/app/scripts:ro
      - ./backend/app/config:/app/config:ro
      - ./backend/results:/results
      - ./backend/uploads:/uploads
      - ./backend/indexes:/indexes:ro
      - ./backend/metadata:/metadata:ro
    environment:
      BASE_URL: ${BASE_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
      NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}

  flower:
    build:
      context: backend
      dockerfile: docker/flower/Dockerfile
    profiles: [ "monitoring" ]
    depends_on:
      - backend
      - rabbitmq
      - celery_worker
    command: sh -c "sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && celery flower --port=5555 --broker=$${CELERY_BROKER_URL} -Q uploads,salmon,downstream"
    tty: true
    ports:
      - 5556:5555
    volumes:
      - ./backend/app/celery:/app/celery:ro
      - ./backend/app/scripts:/app/scripts:ro
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

volumes:
  db-data:
  pgadmin-data: 
