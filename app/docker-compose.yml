version: "3.7"
services:
  backend:
    build:
      context: backend
      dockerfile: docker/api/Dockerfile
    command: sh -c " sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && uvicorn app.main:app --reload --host 0.0.0.0 --port 8080"
    tty: true
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - ./backend/app:/app/app
      - app-data:/app/data
    environment:
      DATABASE_URL: ${DATABASE_URL}
      BASE_URL: ${BASE_URL}
      ORIGINS: ${ORIGINS}
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
      NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REDIS_URL: ${REDIS_URL}

  frontend:
     build:
       context: frontend
       dockerfile: Dockerfile
     tty: true
     ports:
       - "80:3000"
     volumes:
       - ./frontend/:/app
     environment:
      NODE_ENV: development
      BASE_URL: ${BASE_URL}
      REACT_APP_BACKEND_ACCESS_URL: ${REACT_APP_BACKEND_ACCESS_URL} 

  postgres:
    image: postgres:12
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}

  pgadmin:
    tty: true
    image: dpage/pgadmin4
    profiles: [ "monitoring" ]
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "8001:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
  
  kraken2:
    build:
      context: tool
      dockerfile: docker/kraken2/Dockerfile
    command: uvicorn app.main:app --reload --workers 4 --host 0.0.0.0 --port 80
    tty: true
    ports:
      - "8003:80"
    volumes:
      - ./tool/app/:/app/app/:ro
      - app-data:/app/data
      - /mnt/tmp/:/app/data/indexes:ro

  # rabbitmq:
  #   image: rabbitmq:3.9
  #   ports:
  #     - "5672"

  # celery_worker:
  #   build:
  #     context: backend
  #     dockerfile: docker/celery_worker/Dockerfile
  #   depends_on:
  #     - backend
  #     - rabbitmq
  #   command: sh -c "sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && celery -A app.celery.tasks worker -l info -Q uploads,salmon,downstream"
  #   tty: true
  #   volumes:
  #     - ./backend/app:/app/app
  #     - app-data:/app/data
  #   environment:
  #     BASE_URL: ${BASE_URL}
  #     CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  #     CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  #     NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL}
  #     NOTIFICATION_EMAIL_PASSWORD: ${NOTIFICATION_EMAIL_PASSWORD}

  # flower:
  #   build:
  #     context: backend
  #     dockerfile: docker/flower/Dockerfile
  #   profiles: [ "monitoring" ]
  #   depends_on:
  #     - backend
  #     - rabbitmq
  #     - celery_worker
  #   command: sh -c "sh ./bin/wait-for/wait-for.sh rabbitmq:5672 --timeout=20 && celery flower --port=5555 --broker=$${CELERY_BROKER_URL} -Q uploads,salmon,downstream"
  #   tty: true
  #   volumes:
  #     - ./backend/app:/app/app
  #   ports:
  #     - 5556:5555 
  #   environment:
  #     CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  #     CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  
  redis:
    image: redis:7
    command: sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/var/lib/redis/data 
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}

  prefect-server:
    image: prefecthq/prefect:2.4.0-python3.8
    command: prefect orion start
    ports:
      - "4200:4200"
    volumes:
      - ${PWD}/flows:/flows
    environment:
      PREFECT_ORION_API_HOST: 0.0.0.0
      PREFECT_API_URL: http://prefect-server:4200/api
    networks:
      - prefect

  prefect-agent:
    image: prefecthq/prefect:2.4.0-python3.8
    command: prefect agent start -q queue1
    depends_on:
      - prefect-server
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    networks:
      - prefect

networks:
  prefect:
    name: prefect

volumes:
  db-data:
  pgadmin-data: 
  redis-data:
  app-data:
    driver_opts:
      type: none 
      device: ${PWD}/backend/data
      o: bind